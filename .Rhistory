getwd()
### Sample size using a Jung design for randomsied phase II trials for comparison
source("/jungUA.R")
### Sample size using a Jung design for randomsied phase II trials for comparison
source("jungUA.R")
singleStageII(0.7,0.875,0.15,0.85,1.2)
singleStageII(0.7,0.875,0.15,0.8,1.2)
singleStageII(0.7,0.875,0.15,0.8,2)
singleStageII(0.7,0.875,0.15,0.8,1)
singleStageII(0.7,0.875,0.1,0.8,1)
### Standard Binomial diesng
gsdesign.binomial(c(1),0.7,0.875,r=1,0.1,0.8,alternative="one.sided")
### Standard Binomial diesng
library(clinfun)
gsdesign.binomial(c(1),0.7,0.875,r=1,0.1,0.8,alternative="one.sided")
singleStageII(0.7,0.875,0.1,0.8,1)
baseR <- 0.7
delta <- 0.175
N<-250
nsim <- 10000
simRes <-  NULL
k<-1
setTxtProgressBar(pb,k)
#### Simulate dataset
asset1 <- rbinom(N,1,0.25)
asset2 <- rbinom(N,1,0.5)
asset3 <- rbinom(N,1,0.95)
### Detil allocation into each trial cohort
trial <- rep(NA,N)
trial[which(asset1==1)] <- 1
trial[which(asset2==1&asset1!=1)] <- 2
trial[which(asset3==1&asset1!=1&asset2!=1)] <- 3
data <- data.frame("ID"=1:N,asset1,asset2,asset3,trial)
setTxtProgressBar(pb,k)
#### Simulate dataset for analysis
### sample rates of eligibility for each asset
### NB asset1 - cohort 2; asset 2 - cohort 3 and asset 3 - cohort 1 in the application
asset1 <- rbinom(N,1,0.25)
asset2 <- rbinom(N,1,0.5)
asset3 <- rbinom(N,1,0.95)
### Detil allocation into each trial cohort
trial <- rep(NA,N)
trial[which(asset1==1)] <- 1
trial[which(asset2==1&asset1!=1)] <- 2
trial[which(asset3==1&asset1!=1&asset2!=1)] <- 3
## Creating data base
data <- data.frame("ID"=1:N,asset1,asset2,asset3,trial)
### allocating patietns on a 1:2 basis
data$alloc <- round(runif(N,0.25,1))
## Simulating binary outcome
data$lp <- baseR + data$alloc*delta
data$out <- rbinom(N,1,data$lp)
## saving dataset for development of winBugs code for analysis
if(k=1) save(data,file="exData.R")
## saving dataset for development of winBugs code for analysis
if(k==1) save(data,file="exData.R")
#### Bayesian estimation of odds ratio
### Estimate dist of each treatment arm based on time and censoring
id1 <- which(data$trial==1)
tb1 <- table(data$out[id1],data$alloc[id1])
id2 <- which(data$trial==2)
tb2 <- table(data$out[id2],data$alloc[id2])
id3 <- which(data$trial==3)
tb3 <- table(data$out[id3],data$alloc[id3])
########################################################
#### borrowing matrix
borrow.mat <- matrix(0.5,3,3);diag(borrow.mat) <- 1
tb.list <- list(tb1,tb2,tb3)
baseR <- 0.7
delta <- 0.175
N<-250
nsim <- 10000
simRes <-  NULL
pb = txtProgressBar(min = 0, max = nsim, initial = 0)
k<-1
for(k in 1:nsim){
### updating progress bar
setTxtProgressBar(pb,k)
#### Simulate dataset for analysis
### sample rates of eligibility for each asset
### NB asset1 - cohort 2; asset 2 - cohort 3 and asset 3 - cohort 1 in the application
asset1 <- rbinom(N,1,0.25)
asset2 <- rbinom(N,1,0.5)
asset3 <- rbinom(N,1,0.95)
### Detil allocation into each trial cohort
trial <- rep(NA,N)
trial[which(asset1==1)] <- 1
trial[which(asset2==1&asset1!=1)] <- 2
trial[which(asset3==1&asset1!=1&asset2!=1)] <- 3
## Creating data base
data <- data.frame("ID"=1:N,asset1,asset2,asset3,trial)
### allocating patietns on a 1:2 basis
data$alloc <- round(runif(N,0.25,1))
## Simulating binary outcome
data$lp <- baseR + data$alloc*delta
data$out <- rbinom(N,1,data$lp)
## saving dataset for development of winBugs code for analysis
if(k==1) save(data,file="exData.R")
########################################################
#### Bayesian estimation of odds ratio
### Estimate dist of each treatment arm based on time and censoring
id1 <- which(data$trial==1)
tb1 <- table(data$out[id1],data$alloc[id1])
id2 <- which(data$trial==2)
tb2 <- table(data$out[id2],data$alloc[id2])
id3 <- which(data$trial==3)
tb3 <- table(data$out[id3],data$alloc[id3])
########################################################
#### borrowing matrix
borrow.mat <- matrix(0.5,3,3);diag(borrow.mat) <- 1
#borrow.mat <- matrix(c(0,0,0, 0.25,0,0, 0.25,0.5,0),3,3)
tb.list <- list(tb1,tb2,tb3)
pe <- postEst(tb.list,borrow.mat);pe
pr0_direct <- lapply(pe$direct,postEval)
pr0_borrow <- lapply(pe$borrowed,postEval)
direct <- cbind(Reduce("rbind",pe$direct),unlist(pr0_direct))
borrow <- cbind(Reduce("rbind",pe$borrowed),unlist(pr0_borrow))
ret <- list("direct"=direct,"borrow"=borrow)
simRes[[k]] <- ret
}
#### Function to estimate odds ratio from a table
or_est <- function(tb,cc=T){
or <-(tb[1,1]*tb[2,2])/(tb[1,2]*tb[2,1])
lor <- log(or)
se.lor <- sqrt(sum(1/tb))
ret <- c(or,lor,se.lor)
ret
}
#### Function for basic  estimation of posterior distribution
### For simplicity this is performece by borrowing 'data' from other trials and
### down-weighting based
postEst <- function(tb.list,borrow.mat){
direct_est <-   lapply(tb.list,or_est)
#####
br.list <- tb.list
br.list[[1]][,1] <- br.list[[1]][,1] + br.list[[2]][,1]*borrow.mat[2,1] + br.list[[3]][,1]*borrow.mat[3,1]
br.list[[2]][,1] <- br.list[[2]][,1] + br.list[[1]][,1]*borrow.mat[1,2] + br.list[[3]][,1]*borrow.mat[3,2]
br.list[[3]][,1] <- br.list[[3]][,1] + br.list[[1]][,1]*borrow.mat[1,3] + br.list[[2]][,1]*borrow.mat[2,3]
direct_est <-   lapply(tb.list,or_est)
borrow_est <- lapply(br.list,or_est)
list("direct"=direct_est,"borrowed"=borrow_est)
}
### Function to evaluate posterior distribution
postEval <- function(trRes,b=0){
prb <- 1-pnorm(0,trRes[2],trRes[3])
}
baseR <- 0.7
delta <- 0.175
N<-250
nsim <- 10000
simRes <-  NULL
pb = txtProgressBar(min = 0, max = nsim, initial = 0)
k<-1
for(k in 1:nsim){
### updating progress bar
setTxtProgressBar(pb,k)
#### Simulate dataset for analysis
### sample rates of eligibility for each asset
### NB asset1 - cohort 2; asset 2 - cohort 3 and asset 3 - cohort 1 in the application
asset1 <- rbinom(N,1,0.25)
asset2 <- rbinom(N,1,0.5)
asset3 <- rbinom(N,1,0.95)
### Detil allocation into each trial cohort
trial <- rep(NA,N)
trial[which(asset1==1)] <- 1
trial[which(asset2==1&asset1!=1)] <- 2
trial[which(asset3==1&asset1!=1&asset2!=1)] <- 3
## Creating data base
data <- data.frame("ID"=1:N,asset1,asset2,asset3,trial)
### allocating patietns on a 1:2 basis
data$alloc <- round(runif(N,0.25,1))
## Simulating binary outcome
data$lp <- baseR + data$alloc*delta
data$out <- rbinom(N,1,data$lp)
## saving dataset for development of winBugs code for analysis
if(k==1) save(data,file="exData.R")
########################################################
#### Bayesian estimation of odds ratio
### Estimate dist of each treatment arm based on time and censoring
id1 <- which(data$trial==1)
tb1 <- table(data$out[id1],data$alloc[id1])
id2 <- which(data$trial==2)
tb2 <- table(data$out[id2],data$alloc[id2])
id3 <- which(data$trial==3)
tb3 <- table(data$out[id3],data$alloc[id3])
########################################################
#### borrowing matrix
borrow.mat <- matrix(0.5,3,3);diag(borrow.mat) <- 1
#borrow.mat <- matrix(c(0,0,0, 0.25,0,0, 0.25,0.5,0),3,3)
tb.list <- list(tb1,tb2,tb3)
pe <- postEst(tb.list,borrow.mat);pe
pr0_direct <- lapply(pe$direct,postEval)
pr0_borrow <- lapply(pe$borrowed,postEval)
direct <- cbind(Reduce("rbind",pe$direct),unlist(pr0_direct))
borrow <- cbind(Reduce("rbind",pe$borrowed),unlist(pr0_borrow))
ret <- list("direct"=direct,"borrow"=borrow)
simRes[[k]] <- ret
}
#### Evaluating Simulation Results
lap_direct <- lapply(simRes,function(x) as.numeric(x$direct[,4]>0.9))
lap_borrow <- lapply(simRes,function(x) as.numeric(x$borrow[,4]>0.9))
direct_res <- Reduce("rbind",lap_direct);direct_res
borrow_res <- Reduce("rbind",lap_borrow)
### Power Estimates
colSums(direct_res)/nsim
colSums(borrow_res)/nsim
